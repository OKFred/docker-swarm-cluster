/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Server status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** System information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description System information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            data?: {
                                node: string;
                                platform: string;
                                arch: string;
                                cpus: number;
                                memory: number;
                                uptime: number;
                                loadavg: unknown[];
                                totalmem: number;
                                freemem: number;
                                hostname: string;
                                type: string;
                                release: string;
                                networkInterfaces: Record<string, never>;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/case/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a new case */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description New case details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NewCase"];
                };
            };
            responses: {
                /** @description Case added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AddCaseResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/case/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** List cases */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ListCaseQuery"];
                };
            };
            responses: {
                /** @description List of cases */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListCaseResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/case/get/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get case details (for running case) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Case details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Case"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/case/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update (callback) case */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            /** @description Updated case details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCase"];
                };
            };
            responses: {
                /** @description Case updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/case/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a case */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Case deletion response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NewCase: {
            caseName: string;
            caseToken: string;
            caseTimeout: number;
            returnTime: number;
            serviceOptions?: {
                Name?: string;
                Labels?: Record<string, never>;
                TaskTemplate?: Record<string, never>;
                Mode?: Record<string, never>;
                UpdateConfig?: Record<string, never>;
                RollbackConfig?: Record<string, never>;
                Networks?: unknown[];
                EndpointSpec?: Record<string, never>;
            };
            terminateTimeout?: number;
        };
        AddCaseResponse: {
            ok: boolean;
            data: number;
        };
        ListCaseQuery: {
            /** @enum {string} */
            orderBy?: "id" | "caseName" | "caseToken" | "caseTimeout" | "returnTime" | "caseSucceed" | "caseFinished";
            asc?: boolean;
            pageNo?: number;
            pageSize?: number;
            keyword?: string;
        };
        Case: {
            id?: number;
            caseName?: string;
            caseToken?: string;
            caseTimeout?: number;
            returnTime?: number;
            caseSucceed?: boolean;
            caseFinished?: boolean;
            createTime?: string;
            updateTime?: string;
            expectedTime?: string;
            serviceId?: number;
            retryCount?: number;
            maxRetry?: number;
        };
        ListCaseResponse: {
            ok?: boolean;
            data?: components["schemas"]["Case"][];
        };
        UpdateCase: {
            caseToken: string;
            caseSucceed: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
